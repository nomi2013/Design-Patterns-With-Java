<resources>
  <string name="app_name">Design Patterns Java</string>

  <string name="navigation_drawer_open">Open navigation drawer</string>
  <string name="navigation_drawer_close">Close navigation drawer</string>

  <string name="action_settings">Settings</string>
  <string name="single_responsibilty">Single Responsibilty</string>
  <string name="open_close_principle">Open/Close Principle</string>
  <string name="liskov_substitution_principle">Liskov Substitution Principle</string>
  <string name="dependency_inversion_principle">Dependency Inversion Principle</string>

  <string name="single_responsibilty_text">
    <b>We can introduced design pattern to make your code
    flexible.
      \n A well structure code is easy for extension and readable. </b>
    \n\n
    <b>SOLID: </b>
    \n
    <i>
    * S: Single Responsibility Principle.
      \n
    * O: Open/Closed Responsibility Principle.
      \n
    * L: Liskovi Substitution Principle.
      \n
    * S: Dependency inversion Principle.
      \n
    * These principle will meet in design pattern.
    </i>
    \n\n
    <b>
    * S: Single Responsibility Principle
    </b>
     \n
     <b>
    * A class must do, what it design for rather than doing to many task.
    </b>
     \n
     <b>
    * We can avoid through composition or interface.
      </b>
  </string>

  <string name="design_patterns_text">
    <b>We can introduced design pattern to make your code
    flexible.
      \n A well structure code is easy for extension and readable. </b>
    \n\n
    <b>SOLID: </b>
    \n
    <i>
    * S: Single Responsibility Principle.
      \n
    * O: Open/Closed Responsibility Principle.
      \n
    * L: Liskovi Substitution Principle.
      \n
    * S: Dependency inversion Principle.
      \n
    * These principle will meet in design pattern.
    </i>
    \n\n
    <b>
    * Behavior design patterns.
    </b>
      \n  \u0020 1. Strategy pattern.
      \n  \u0020 2. Observer Pattern.
     \n\n
     <b>
    * Creational design patterns.
     </b>
       \n  \u0020 1. Singleton pattern.
      \n   \u0020 2. Factory Pattern.
     \n\n
     <b>
    * Structural design patterns.
        </b>
       \n  \u0020 1. Strategy pattern.
      \n   \u0020 2. Observer Pattern.
  </string>


  <string name="open_close_text">
    <b>We can introduced design pattern to make your code
    flexible.
      \n A well structure code is easy for extension and readable. </b>
    \n\n
    <b>SOLID: </b>
    \n
    <i>
    * S: Single Responsibility Principle.
      \n
    * O: Open/Closed Responsibility Principle.
      \n
    * L: Liskovi Substitution Principle.
      \n
    * S: Dependency inversion Principle.
      \n
    * These principle will meet in design pattern.
    </i>
    \n\n
    <b>
     O: Open/Close Principle:
    </b>
      \n  \u0020 * A class must open for extension and close for modification,
    We can achieve through inheritance, delegation and composition.

  </string>

  <string name="liskov_text">
    <b>We can introduced design pattern to make your code
    flexible.
      \n A well structure code is easy for extension and readable. </b>
    \n\n
    <b>SOLID: </b>
    \n
    <i>
    * S: Single Responsibility Principle.
      \n
    * O: Open/Closed Responsibility Principle.
      \n
    * L: Liskovi Substitution Principle.
      \n
    * S: Dependency inversion Principle.
      \n
    * These principle will meet in design pattern.
    </i>
    \n\n
    <b>
     L: Liskov Substitution Principle:
    </b>
      \n  \u0020 * If A class extend with B, then B class can be replace with A.

  </string>

  <string name="dependency_inversion_text">
    <b>We can introduced design pattern to make your code
    flexible.
      \n A well structure code is easy for extension and readable. </b>
    \n\n
    <b>SOLID: </b>
    \n
    <i>
    * S: Single Responsibility Principle.
      \n
    * O: Open/Closed Responsibility Principle.
      \n
    * L: Liskovi Substitution Principle.
      \n
    * D: Dependency inversion Principle.
      \n
    * These principle will meet in design pattern.
    </i>
    \n\n
    <b>
    D: Dependency Inversion Principle:
    </b>
      \n  \u0020 *    When a high level system is tightly \u0020dependent on low level system and
    vice-versa. \n \020u0 We should
      always design loosely coupled software. \n \u0020 It is easy to maintain.
      We have to meet always Open/Close principle.

   \n\n  \u0020 * <b> High Level Modules &lt;-----> \n \u0020Abstract Layer &lt;-----> \n \u0020Low
     Level Modules</b>


  </string>
  <string name="str_strategy_pattern">
    <b>
    1. What varies should be encapsulate. \n \u0020\u0020\u0020 Varying code ----- stay same code.
      \n\n
    2. Code to interface/supertype, \n \u0020\u0020\u0020 not to implementation.
      \n\n
    3. Favour composition over inheritance.
    </b>
  </string>
  <string name="str_template_pattern">
    <b>
    1. The abstract class will define sets of methods \n\u0020\u0020\u0020\u0020  as template.
    \n\n
      2. The subclass will execute the methods, \n\u0020\u0020\u0020\u0020
      they way are defined in super class.
    </b>
  </string>
  <string name="str_observer_pattern">
    <b>
    1. It follow one-to many concept.
     \n\u0020\u0020\u0020\u0020 When a state of object is changed, notified to
      \n\u0020\u0020\u0020\u0020 all its
    dependents.
      \n\n
  2. Its loosely coupled software design patterns \n \u0020\u0020\u0020\u0020\u0020 between objects.
 </b>
  </string>
  <string name="str_sing_pattern">
    <b>

    1. This design pattern is useful to have only one \n\u0020\u0020\u0020\u0020 object of a class.
    \n\n
      2. It strict class to have only one object, saves \n\u0020\u0020\u0020\u0020 memory.
     </b>

</string>

  <string name="str_builder_pattern">
    <b>
    1. When a class have to many properties, \n\u0020\u0020\u0020\u0020
      it is very messy to have to many constructor or \n\u0020\u0020\u0020\u0020setters.
    \n\n
    2. Builder pattern helps in avoiding creation of \n\u0020\u0020\u0020\u0020 constructor as
      parameters grows.
    \n\n
    3. Flexible to add new property in class.
    </b>
  </string>
  <string name="str_factory_pattern">
    <b>
    1. This pattern is useful when bulk of object \n\u0020\u0020\u0020\u0020creation is done.
      \n\n
    2. Follow rule code to interface.
      \n\n
    3. This pattern also meet Open/Close principle
  </b>
  </string>
  <string name="str_facde_pattern" >
    <b>
    It defines high level interfaces for low level system.
  </b>
  </string>
  <string name="str_adap_pattern">
    <b>
    1. It convert interface of class to other interface as client expect.
  </b>
  </string>

</resources>
